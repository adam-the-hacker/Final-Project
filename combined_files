# Main code
import random
import time as t
from pygame import*
from math import*
from random import*
from pieces import*

""" VARIABLES """

maingrid = [[9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],
            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]

init()
blocblanc = image.load('Bloc blanc.PNG')
bloccyan = image.load('Bloc cyan.PNG')
blocblue = image.load('Bloc blue.PNG')
blocorange = image.load('Bloc orange.PNG')
blocyellow = image.load('Bloc yellow.PNG')
blocgreen = image.load('Bloc green.PNG')
blocpurple = image.load('Bloc purple.PNG')
blocred = image.load('Bloc red.PNG')
blocscore = image.load('Bloc score.PNG')
lbloc = [bloccyan, blocblue, blocorange, blocyellow, blocgreen, blocpurple, blocred]

fenetre = display.set_mode((480,600), RESIZABLE)

isactivepiece = 0 # Si cette variable est égale à 1, alors on appelle la fonction poser(bloc) pour générer un bloc aléatoire
                        # Si elle est égale à 0, on attend que le bloc soit posé pour la mettre à 1 et donc générer un nouveau bloc
piece_x = 0
piece_y = 0
comp = 0
continuer = 1
vspeed = 10         # Vertical speed, On le réduira pour augmenter la difficulté
level = vspeed // 10
temps = t.time()
rotated_bloc = 0
piece0 = True
activebloc = None
score = 0
high_scores=open("score.txt", "a+")
totallines = 0

""" FUNCTIONS """

def rotate_piece(piece):
    piece2 = [[0 for x in range(len(piece))] for y in range(len(piece[0]))]
    for x in range(len(piece[0])):
        for y in range(len(piece)):
            piece2[x][y] = piece[len(piece) - y - 1][x]
    piece = piece2
    return piece


def poser(piece, x, y):
    global piece_x, piece_y
    piece_x, piece_y = x, y
    for i in range(len(piece)):
        for j in range(len(piece[0])):
            if piece[i][j] != 0:
                maingrid[i + y][j + x + 1] = piece[i][j]

def collision(piece):
    global maingrid, piece_x, piece_y
    for y in range(len(piece)):
        for x in range(len(piece)):
            if piece[y][x] != 0:
                if maingrid[piece_y + y][piece_x + x + 1] != 0:
                    return True
    return False

def destroyline():
    global score, level, completedlines, totallines
    completedlines = 0
    destroyed = False

    for y in range(len(maingrid) - 3):
        if all(maingrid[y]):
            maingrid.pop(y)
            maingrid.insert(0, [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8])
            completedlines += 1
            totallines += 1
            destroyed = True

    if destroyed:
        score += ((100 + 200 * (completedlines - 1)) * level)

"""AFFICHAGE"""

def showgrid():
    for y in range(len(maingrid)):
        for x in range(len(maingrid[1])):
            if maingrid[y][x] == 0:
                fenetre.blit(blocblanc,
                             ((x - 1) * 30, y * 30))  # Le coef 30 existe car ce sont les dimensions d'un carré
            if maingrid[y][x] == 1:
                fenetre.blit(bloccyan, ((x - 1) * 30, y * 30))
            if maingrid[y][x] == 2:
                fenetre.blit(blocblue, ((x - 1) * 30, y * 30))
            if maingrid[y][x] == 3:
                fenetre.blit(blocorange, ((x - 1) * 30, y * 30))
            if maingrid[y][x] == 4:
                fenetre.blit(blocyellow, ((x - 1) * 30, y * 30))
            if maingrid[y][x] == 5:
                fenetre.blit(blocgreen, ((x - 1) * 30, y * 30))
            if maingrid[y][x] == 6:
                fenetre.blit(blocpurple, ((x - 1) * 30, y * 30))
            if maingrid[y][x] == 7:
                fenetre.blit(blocred, ((x - 1) * 30, y * 30))
            if maingrid[y][x] == 8:
                fenetre.blit(blocscore, ((x - 1) * 30, y * 30))

def affichepiece(piece):
    global piece_x, piece_y
    for l in range(len(piece)):
        for c in range(len(piece)):
            if piece[l][c] != 0:
                fenetre.blit(lbloc[piece[l][c] - 1], ((piece_x + c) * 30, (piece_y + l) * 30))

""" MAIN CODE """

while continuer == 1:
    time.Clock().tick(10)
    for evenements in event.get():
        if evenements.type == QUIT:
            continuer = 0

    if isactivepiece == 0:
        activebloc = choice([cyan, blue, orange, yellow, green, purple, red])
        piece_y = 0
        piece_x = 3
        if collision(activebloc):
            continue # stoppe le jeu et affche le score ect...
        isactivepiece = 1

    keyb = key.get_pressed()

    if keyb[K_RIGHT]:
        piece_x += 1
        if collision(activebloc):
            piece_x -= 1

    if keyb[K_LEFT]:
        piece_x -= 1
        if collision(activebloc):
            piece_x +=1

    if keyb[K_SPACE]:
        while not collision(activebloc):
            piece_y += 1
        piece_y -=1
        score+=10 #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!??

    if keyb[K_DOWN]:
        piece_y += 1
        if collision(activebloc):
            piece_y -= 1
        score += 1

    if keyb[K_UP]:
        activebloc2 = activebloc
        activebloc2 = rotate_piece(activebloc2)
        if collision(activebloc2):
            continue
        else:
            activebloc = rotate_piece(activebloc)

    if comp % (vspeed) == 0:
        piece_y += 1
        if collision(activebloc):
            piece_y -= 1
            poser(activebloc, piece_x, piece_y)
            isactivepiece = 0

    # Affichage
    showgrid()

    affichepiece(activebloc)
    destroyline()
    display.flip()
    comp += 1

# On met le score dans un doc
high_scores.write(str(score)+"\n")
high_scores.close()
# Syntaxes :
# Lire le fichier: open("score.txt","r")
# Le lire ligne par ligne: high_scores_list = high_scores.readlines.
